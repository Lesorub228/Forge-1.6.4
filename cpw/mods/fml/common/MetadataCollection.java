// 
// Decompiled by Procyon v0.6.0
// 

package cpw.mods.fml.common;

import java.util.Iterator;
import argo.jdom.JsonNode;
import argo.jdom.JsonRootNode;
import com.google.common.base.Throwables;
import argo.saj.InvalidSyntaxException;
import java.util.logging.Level;
import java.io.Reader;
import java.io.InputStreamReader;
import java.io.InputStream;
import com.google.common.collect.Maps;
import java.util.Map;
import argo.jdom.JdomParser;

public class MetadataCollection
{
    private static JdomParser parser;
    private Map<String, ModMetadata> metadatas;
    private int metadataVersion;
    
    public MetadataCollection() {
        this.metadatas = Maps.newHashMap();
        this.metadataVersion = 1;
    }
    
    public static MetadataCollection from(final InputStream inputStream, final String sourceName) {
        if (inputStream == null) {
            return new MetadataCollection();
        }
        final InputStreamReader reader = new InputStreamReader(inputStream);
        try {
            final JsonRootNode root = MetadataCollection.parser.parse((Reader)reader);
            if (root.hasElements()) {
                return parse10ModInfo(root);
            }
            return parseModInfo(root);
        }
        catch (final InvalidSyntaxException e) {
            FMLLog.log(Level.SEVERE, (Throwable)e, "The mcmod.info file in %s cannot be parsed as valid JSON. It will be ignored", sourceName);
            return new MetadataCollection();
        }
        catch (final Exception e2) {
            throw Throwables.propagate((Throwable)e2);
        }
    }
    
    private static MetadataCollection parseModInfo(final JsonRootNode root) {
        final MetadataCollection mc = new MetadataCollection();
        mc.metadataVersion = Integer.parseInt(root.getNumberValue(new Object[] { "modinfoversion" }));
        mc.parseModMetadataList(root.getNode(new Object[] { "modlist" }));
        return mc;
    }
    
    private static MetadataCollection parse10ModInfo(final JsonRootNode root) {
        final MetadataCollection mc = new MetadataCollection();
        mc.parseModMetadataList((JsonNode)root);
        return mc;
    }
    
    private void parseModMetadataList(final JsonNode metadataList) {
        for (final JsonNode node : metadataList.getElements()) {
            final ModMetadata mmd = new ModMetadata(node);
            this.metadatas.put(mmd.modId, mmd);
        }
    }
    
    public ModMetadata getMetadataForId(final String modId, final Map<String, Object> extraData) {
        if (!this.metadatas.containsKey(modId)) {
            final ModMetadata dummy = new ModMetadata();
            dummy.modId = modId;
            dummy.name = extraData.get("name");
            dummy.version = extraData.get("version");
            dummy.autogenerated = true;
            this.metadatas.put(modId, dummy);
        }
        return this.metadatas.get(modId);
    }
    
    static {
        MetadataCollection.parser = new JdomParser();
    }
}
