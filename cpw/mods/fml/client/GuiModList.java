// 
// Decompiled by Procyon v0.6.0
// 

package cpw.mods.fml.client;

import java.io.InputStream;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.awt.Dimension;
import javax.imageio.ImageIO;
import org.lwjgl.opengl.GL11;
import java.util.Iterator;
import com.google.common.base.Strings;
import cpw.mods.fml.common.Loader;
import java.util.ArrayList;
import cpw.mods.fml.common.ModContainer;

public class GuiModList extends awe
{
    private awe mainMenu;
    private GuiSlotModList modList;
    private int selected;
    private ModContainer selectedMod;
    private int listWidth;
    private ArrayList<ModContainer> mods;
    
    public GuiModList(final awe mainMenu) {
        this.selected = -1;
        this.mainMenu = mainMenu;
        this.mods = new ArrayList<ModContainer>();
        FMLClientHandler.instance().addSpecialModEntries(this.mods);
        for (final ModContainer mod : Loader.instance().getModList()) {
            if (mod.getMetadata() != null && mod.getMetadata().parentMod == null && !Strings.isNullOrEmpty(mod.getMetadata().parent)) {
                final String parentMod = mod.getMetadata().parent;
                final ModContainer parentContainer = Loader.instance().getIndexedModList().get(parentMod);
                if (parentContainer != null) {
                    mod.getMetadata().parentMod = parentContainer;
                    parentContainer.getMetadata().childMods.add(mod);
                    continue;
                }
            }
            else if (mod.getMetadata() != null && mod.getMetadata().parentMod != null) {
                continue;
            }
            this.mods.add(mod);
        }
    }
    
    public void A_() {
        for (final ModContainer mod : this.mods) {
            this.listWidth = Math.max(this.listWidth, this.getFontRenderer().a(mod.getName()) + 10);
            this.listWidth = Math.max(this.listWidth, this.getFontRenderer().a(mod.getVersion()) + 10);
        }
        this.listWidth = Math.min(this.listWidth, 150);
        this.i.add(new awl(6, this.g / 2 - 75, this.h - 38, bkb.a("gui.done")));
        (this.modList = new GuiSlotModList(this, this.mods, this.listWidth)).registerScrollButtons(this.i, 7, 8);
    }
    
    protected void a(final aut button) {
        if (button.h) {
            switch (button.g) {
                case 6: {
                    this.f.a(this.mainMenu);
                    return;
                }
            }
        }
        super.a(button);
    }
    
    public int drawLine(final String line, final int offset, final int shifty) {
        final int r = this.o.b(line, offset, shifty, 14151146);
        return shifty + 10;
    }
    
    public void a(final int p_571_1_, final int p_571_2_, final float p_571_3_) {
        this.modList.drawScreen(p_571_1_, p_571_2_, p_571_3_);
        this.a(this.o, "Mod List", this.g / 2, 16, 16777215);
        int offset = this.listWidth + 20;
        if (this.selectedMod != null) {
            GL11.glEnable(3042);
            if (!this.selectedMod.getMetadata().autogenerated) {
                int shifty = 35;
                final String logoFile = this.selectedMod.getMetadata().logoFile;
                if (!logoFile.isEmpty()) {
                    GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
                    final bim tm = this.f.J();
                    final bjr pack = FMLClientHandler.instance().getResourcePackFor(this.selectedMod.getModId());
                    try {
                        BufferedImage logo = null;
                        if (pack != null) {
                            logo = pack.a();
                        }
                        else {
                            final InputStream logoResource = this.getClass().getResourceAsStream(logoFile);
                            if (logoResource != null) {
                                logo = ImageIO.read(logoResource);
                            }
                        }
                        if (logo != null) {
                            final bjo rl = tm.a("modlogo", new bib(logo));
                            this.f.N.a(rl);
                            final Dimension dim = new Dimension(logo.getWidth(), logo.getHeight());
                            final double scaleX = dim.width / 200.0;
                            final double scaleY = dim.height / 65.0;
                            double scale = 1.0;
                            if (scaleX > 1.0 || scaleY > 1.0) {
                                scale = 1.0 / Math.max(scaleX, scaleY);
                            }
                            final Dimension dimension = dim;
                            dimension.width *= (int)scale;
                            final Dimension dimension2 = dim;
                            dimension2.height *= (int)scale;
                            final int top = 32;
                            final bfq tess = bfq.a;
                            tess.b();
                            tess.a((double)offset, (double)(top + dim.height), (double)this.n, 0.0, 1.0);
                            tess.a((double)(offset + dim.width), (double)(top + dim.height), (double)this.n, 1.0, 1.0);
                            tess.a((double)(offset + dim.width), (double)top, (double)this.n, 1.0, 0.0);
                            tess.a((double)offset, (double)top, (double)this.n, 0.0, 0.0);
                            tess.a();
                            shifty += 65;
                        }
                    }
                    catch (final IOException ex) {}
                }
                this.o.a(this.selectedMod.getMetadata().name, offset, shifty, 16777215);
                shifty += 12;
                shifty = this.drawLine(String.format("Version: %s (%s)", this.selectedMod.getDisplayVersion(), this.selectedMod.getVersion()), offset, shifty);
                shifty = this.drawLine(String.format("Mod ID: '%s' Mod State: %s", this.selectedMod.getModId(), Loader.instance().getModState(this.selectedMod)), offset, shifty);
                if (!this.selectedMod.getMetadata().credits.isEmpty()) {
                    shifty = this.drawLine(String.format("Credits: %s", this.selectedMod.getMetadata().credits), offset, shifty);
                }
                shifty = this.drawLine(String.format("Authors: %s", this.selectedMod.getMetadata().getAuthorList()), offset, shifty);
                shifty = this.drawLine(String.format("URL: %s", this.selectedMod.getMetadata().url), offset, shifty);
                shifty = this.drawLine(this.selectedMod.getMetadata().childMods.isEmpty() ? "No child mods for this mod" : String.format("Child mods: %s", this.selectedMod.getMetadata().getChildModList()), offset, shifty);
                final int rightSide = this.g - offset - 20;
                if (rightSide > 20) {
                    this.getFontRenderer().a(this.selectedMod.getMetadata().description, offset, shifty + 10, rightSide, 14540253);
                }
            }
            else {
                offset = (this.listWidth + this.g) / 2;
                this.a(this.o, this.selectedMod.getName(), offset, 35, 16777215);
                this.a(this.o, String.format("Version: %s", this.selectedMod.getVersion()), offset, 45, 16777215);
                this.a(this.o, String.format("Mod State: %s", Loader.instance().getModState(this.selectedMod)), offset, 55, 16777215);
                this.a(this.o, "No mod information found", offset, 65, 14540253);
                this.a(this.o, "Ask your mod author to provide a mod mcmod.info file", offset, 75, 14540253);
            }
            GL11.glDisable(3042);
        }
        super.a(p_571_1_, p_571_2_, p_571_3_);
    }
    
    atv getMinecraftInstance() {
        return this.f;
    }
    
    avi getFontRenderer() {
        return this.o;
    }
    
    public void selectModIndex(final int var1) {
        this.selected = var1;
        if (var1 >= 0 && var1 <= this.mods.size()) {
            this.selectedMod = this.mods.get(this.selected);
        }
        else {
            this.selectedMod = null;
        }
    }
    
    public boolean modIndexSelected(final int var1) {
        return var1 == this.selected;
    }
}
